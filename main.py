import logging
from aiogram import Bot, executor
from aiogram import Dispatcher, types

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from buttons import welcome_buttons, address_buttons, problems
import os
from dotenv import load_dotenv

photo_guide_id = "AgACAgIAAxkBAAMVZfckhCK92ePeXEK7TsliYXKWQC0AAr_cMRtP0rhL2vvB82OddZEBAAMCAAN5AAM0BA"
admin_group_id = "-1002035517605"

load_dotenv()

TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)

dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)


class BadPhotos(StatesGroup):
    order_numb = State()
    photos = State()


state_address = {
    "SBS": "–ú–§–¶ –Ω–∞ –£—Ä–∞–ª—å—Å–∫–æ–π 79/6 (–°–ë–°)",
    "zipovskaya": "–ú–§–¶ –Ω–∞ –ó–∏–ø–æ–≤—Å–∫–æ–π 5",
    "dzerzhinskogo": "–ú–§–¶ –Ω–∞ –î–∑–µ—Ä–∂–∏–Ω—Å–∫–æ–≥–æ 100 (–¢–¶ –ö—Ä–∞—Å–Ω–∞—è –ü–ª–æ—â–∞–¥—å)",
    "krasnaya": "–ú–§–¶ –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π 176 (–¢–¶ –¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞)"
}


async def welcome(message: types.Message):
    await message.answer('–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ NanoPhoto', reply_markup=welcome_buttons())


async def photos(message: types.Message):
    if message.photo:
        photo = message.photo[-1]
    print(photo.file_id)


async def guide(callback: types.CallbackQuery):
    await callback.message.edit_text('''‚ö°Ô∏è‚ö°Ô∏è–ü–û–®–ê–ì–û–í–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –†–ê–°–ü–ï–ß–ê–¢–ö–ï –§–û–¢–û ‚ö°Ô∏è‚ö°Ô∏è

1Ô∏è‚É£–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞. ‚ö†Ô∏è–ï—Å–ª–∏ –í—ã –Ω–æ—Å–∏—Ç–µ –æ—á–∫–∏üßê - –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏—Ö –ª—É—á—à–µ —Å–Ω—è—Ç—å (–±—É–¥—É—Ç –±–ª–∏–∫–∏ –Ω–∞ —Å—Ç–µ–∫–ª–µ). –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (—Ä–µ–ª–∏–≥–∏–æ–∑–Ω–∞—è –æ–¥–µ–∂–¥–∞ –∏ —Ç.–ø.) —É—Ç–æ—á–Ω–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ —Å—Ç–æ–π–∫–µ. 

2Ô∏è‚É£–°—è–¥—å—Ç–µ —Ä–æ–≤–Ω–æ. –ü–æ–¥–Ω–∏–º–∏—Ç–µ/–æ–ø—É—Å—Ç–∏—Ç–µ —Å—Ç—É–ª –∏–ª–∏ –ø–æ–¥–≤–∏–Ω—å—Ç–µ—Å—å –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. 
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ¬ªüì∏  –∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥ —Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π –≤ –æ–±—ä–µ–∫—Ç–∏–≤ —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç–∞. 

3Ô∏è‚É£–û—Ç—Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ –∫—Ä–∞—Å–Ω—ã–º –ª–∏–Ω–∏—è–º üôé‚Äç‚ôÇÔ∏è, —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞. ‚ö†Ô∏è–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ª–∏–Ω–∏–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ/–Ω–∏–∂–µ –ª–∏—Ü–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å—Å—è –Ω–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º.

4Ô∏è‚É£–ï—Å–ª–∏¬†—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –í–∞—Å¬†–Ω–µ¬†—É—Å—Ç—Ä–æ–∏–ª–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª –∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ.

5Ô∏è‚É£–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ¬†—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –í–∞—Å¬†—É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏¬†–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–î–∞–ª–µ–µ¬ª. –ü–µ—á–∞—Ç—å üñ® —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞—á–Ω–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.

6Ô∏è‚É£–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ –∫–∞—Ä—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ãüí≥. –û–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥—É –±–µ—Å–∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –∏—Å–ø–æ–ª—å–∑—É—è –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É –∏–ª–∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω —Å NFC –º–æ–¥—É–ª–µ–ºüöÄ
\n –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start''')
    await callback.message.answer_photo(photo_guide_id)


async def choose_address(callback: types.CallbackQuery):
    await callback.message.edit_text('''–° –∫–∞–∫–æ–π —Ñ–æ—Ç–æ–∫–∞–±–∏–Ω–æ–π –≤–æ–∑–Ω–∏–∫–ª–∏ —É –í–∞—Å –ø—Ä–æ–±–ª–µ–º—ã?''',
                                     reply_markup=address_buttons())


async def what_problem(callback: types.CallbackQuery):
    address = callback.data.split("_")[1]
    await callback.message.edit_text("–ö–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞?", reply_markup=problems(address))


async def not_working(callback: types.CallbackQuery):
    address = callback.data.split("_")[2]
    await callback.message.edit_text(
        "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –° –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
        "\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    await bot.send_message(admin_group_id, "#–ü—Ä–æ–±–ª–µ–º–∞_–≤—ã–∫–ª—é—á–µ–Ω–æ \n–ü–æ—Å—Ç—É–ø–∏–ª–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @"
                           + callback.from_user.username + "\n–ê–¥—Ä–µ—Å –∫–∞–±–∏–Ω–∫–∏: "
                           + state_address[address])


async def photo_lines_one(callback: types.CallbackQuery, state: FSMContext):
    await BadPhotos.order_numb.set()
    address = callback.data.split("_")[2]
    await state.update_data(address=address)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –∏–ª–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–º–µ—Ä (12.01 13:00)")


async def photo_lines_two(message: types.Message, state: FSMContext):
    await BadPhotos.photos.set()
    await state.update_data(order_numb=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")


async def photo_lines_three(message: types.Message, state: FSMContext):
    if message.photo:
        photo = message.photo[-1]
        order_numb = await state.get_data()
        await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ "
                             "–¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤!"
                             "\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        await bot.send_photo(admin_group_id, photo.file_id,
                             caption=("#–ü—Ä–æ–±–ª–µ–º–∞_–ø–µ—á–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <blockquote>" + order_numb['order_numb'] +
                                      "</blockquote>\n–æ—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @" + message.from_user.username +
                                      "\n–ê–¥—Ä–µ—Å –∫–∞–±–∏–Ω–∫–∏: " + state_address[order_numb['address']]),
                             parse_mode='HTML'
                             )
        await state.reset_state()
        await state.reset_data()
    else:
        await message.answer("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")


def main_routers(dp: Dispatcher):
    dp.register_message_handler(photos, state="*", content_types=types.ContentType.PHOTO)
    dp.register_message_handler(welcome, commands=["start"], state="*")
    dp.register_callback_query_handler(guide,
                                       lambda callback_query: callback_query.data == "guide",
                                       state="*")
    dp.register_callback_query_handler(choose_address,
                                       lambda callback_query: callback_query.data == "problem1",
                                       state="*")
    dp.register_callback_query_handler(what_problem,
                                       lambda callback_query: callback_query.data.startswith("address_"),
                                       state="*")
    dp.register_callback_query_handler(not_working,
                                       lambda callback_query: callback_query.data.startswith("not_working"),
                                       state="*")
    dp.register_callback_query_handler(photo_lines_one,
                                       lambda callback_query: callback_query.data.startswith("photos_lines_"),
                                       state="*")
    dp.register_message_handler(photo_lines_two,
                                state=BadPhotos.order_numb)
    dp.register_message_handler(photo_lines_three,
                                content_types=types.ContentType.PHOTO,
                                state=BadPhotos.photos)


main_routers(dp)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
